===========================================================================================
*cool_substitute.nvim*                          is a plugin to perform macro on selections.

CONTENTS                                         *cool-substitute*

1. Setup .................... |cool-substitute.setup|
2. Default Mappings ......... |cool-substitute.mappings|
3. Usage .................... |cool-substitute.usage|
4. Methods .................. |cool-substitute.methods|

=========================================================================================
SECTION 1: Setup                                                  *cool-substitute.setup*

To setup cool substitute, just add this to your config:

require'cool-substitute'.setup({
  setup_keybindings = true,
  mappings = {
    start = 'gm', -- Mark word / region
    start_and_edit = 'gM', -- Mark word / region and also edit
    start_and_edit_word = 'g!M', -- Mark word / region and also edit.  Edit only full word.
    start_word = 'g!m', -- Mark word / region. Edit only full word
    apply_substitute_and_next = 'M', -- Start substitution / Go to next substitution
    apply_substitute_and_prev = '<C-b>', -- same as M but backwards
    apply_substitute_all = 'ga', -- Substitute all
    force_terminate_substitute = 'g!!' -- Terminate macro (if some bug happens)
  },
  reg_char = 'o', -- letter to save macro (Dont use number or uppercase here)
  mark_char = 't', -- mark the position at start of macro
  writing_substitution_color = "#ECBE7B", -- for status line
  applying_substitution_color = "#98be65", -- for status line
  edit_word_when_starting_with_substitute_key = true (press M to mark and edit when not executing anything anything)
})





=========================================================================================
SECTION 2: Default Mappingss ..................................*cool-substitute.mappings*

gm    = Mark word / region
gM    = Mark word / region and also edit
g!M   = Mark word / region and also edit.  Edit only full word.
g!m   = Mark word / region. Edit only full word
M     = Start substitution / Go to next substitution
<C-b> = same as M but backwards
ga    = Substitute all
g!!   = Terminate macro (if some bug happens)





=========================================================================================
SECTION 3: Usage .................................................*cool-substitute.usage*

1. Press `gm` or `M` to mark word / region.  M will also delete the word.
2. Do anything you want, change with r, e, add something at beggining of line, etc
3. press `M` or `<C-b>` to go finish the editing record and go forward / backward
4. Keep pressing `M` or `<C-b>` to go applying the changes in selection
5. Press `<ENTER>` to mark match at cursor to be ignored
6. Navigate without changing with Ctrl + j and Ctrl + k
7. To change all occurrences, press `ga`





=========================================================================================
SECTION 4: Methods .............................................*cool-substitute.methods*

require('cool-substitute.substitute').start_recording({ opts })    *cool-substitute.start_recondig()*

Start recording the substitution.

opts:

- complete_word: boolean = Will select the word at point.  Use false on visual mode.
- edit_word: boolean = If true, instead of just marking, it will also change and enter in insert mode.




require('cool-substitute.sstop_recording').stop_recording({ opts })    *cool-substitute.stop_recording()*

Stop recording and go to the next match.

opts:

- backwards: boolean = Will go to match at backwardWill go to match at backwards





require('cool-substitute.substitute').end_substitution()    *cool-substitute.end_substitution()*

Will finish the cool substitute.




require('cool-substitute.skip').end_substitution()    *cool-substitute.skip()*

Will mark current match at applied but do nothing.




require('cool-substitute.apply_and_next').apply_and_next()    *cool-substitute.apply_and_next*

Will mark as applied and go to next match.




require('cool-substitute.apply_and_previous').end_substitution()    *cool-substitute.apply_and_previous*

Will mark as applied and go to previous match.




require('cool-substitute.substitute_all').end_substitution()    *cool-substitute.substitute_all*

Apply the recorded macro to all substitutions
